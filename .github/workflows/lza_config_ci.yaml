name: LZA Config CI/CD

on:
  push:
    branches:
      - master
      - '**' # All branches
    paths:
      - 'config/**'
      - '.github/workflows/lza_config_ci.yaml'
      - 'schema.yaml'
  pull_request:
    branches:
      - master
    paths:
      - 'config/**'
      - '.github/workflows/lza_config_ci.yaml'
      - 'schema.yaml'
  workflow_dispatch:
    inputs:
      skip_preflight:
        description: 'Skip the LZA preflight checks (Only applies to manual runs)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read # Needed to check out the repository
  id-token: write # Needed for AWS OIDC authentication

jobs:
  validate:
    name: Validate YAML Config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: pip install yamllint

      - name: Lint YAML files
        run: |
          echo "Linting YAML configuration files with yamllint..."
          yamllint config/
          echo "Linting successful."

      - name: Validate Replacement Keys
        run: |
          pip install pyyaml
          python scripts/validate_replacements.py

      - name: Validate JSON Config Files
        run: |
          python scripts/validate_json_configs.py

  deploy:
    name: Deploy to S3 and Trigger Pipeline
    runs-on: ubuntu-latest
    needs: validate # Ensure validation passes first
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch' # Run on push to main or manual dispatch
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Mandatory Secrets
        id: check_secrets
        run: |
          missing_secrets=""
          if [ -z "${{ secrets.AWS_OIDC_ROLE_ARN }}" ]; then missing_secrets="AWS_OIDC_ROLE_ARN "; fi
          if [ -z "${{ secrets.AWS_REGION }}" ]; then missing_secrets="${missing_secrets}AWS_REGION "; fi
          if [ -z "${{ secrets.S3_BUCKET }}" ]; then missing_secrets="${missing_secrets}S3_BUCKET "; fi
          if [ -z "${{ secrets.CODEPIPELINE_NAME }}" ]; then missing_secrets="${missing_secrets}CODEPIPELINE_NAME "; fi
          if [ -z "${{ secrets.LZA_STACK_PREFIX }}" ]; then missing_secrets="${missing_secrets}LZA_STACK_PREFIX "; fi

          if [ -n "$missing_secrets" ]; then
            echo "::error::Missing mandatory secrets: $missing_secrets"
            exit 1
          else
            echo "All mandatory secrets are present."
          fi

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }} # Use OIDC Role ARN secret
          aws-region: ${{ secrets.AWS_REGION }} # Use a secret for the region

      - name: Run LZA Preflight Checks
        # Always run but continue on error if skip_preflight is true
        continue-on-error: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.skip_preflight == 'true' }}
        env:
          STACK_PREFIX: ${{ secrets.LZA_STACK_PREFIX }} # Use secret for prefix, rename to STACK_PREFIX
          # Ensure AWS_REGION and potentially CT_HOME_REGION are available if needed by the script
          AWS_REGION: ${{ secrets.AWS_REGION }}
          # CT_HOME_REGION: ${{ secrets.CT_HOME_REGION }} # Add if needed and different from AWS_REGION
        run: |
          echo "Setting up Python for preflight checks..."
          # Although Python might be available, explicitly set it up for clarity
          # python -m venv .venv
          # source .venv/bin/activate
          pip install -r requirements.txt # Assuming requirements.txt is at root
          echo "Running LZA preflight check script using STACK_PREFIX env var..."
          # Run the script as a module, it reads STACK_PREFIX from env vars
          python -m preflight_checks.aws_checks
          echo "Preflight checks completed."

      - name: Zip Configuration Files
        run: |
          echo "Creating aws-accelerator-config.zip including all files and directories..."
          cd config
          zip -r ../aws-accelerator-config.zip *
          cd ..
          echo "Zip file created."

      - name: Upload Config Zip as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: aws-accelerator-config
          path: aws-accelerator-config.zip

      - name: Upload Config to S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          S3_KEY_PREFIX: ${{ secrets.S3_KEY_PREFIX }} # Optional prefix
        run: |
          echo "Uploading aws-accelerator-config.zip to s3://${S3_BUCKET}/${S3_KEY_PREFIX}/"
          aws s3 cp aws-accelerator-config.zip s3://${S3_BUCKET}/${S3_KEY_PREFIX}/aws-accelerator-config.zip
          echo "Upload complete."

      - name: Trigger CodePipeline
        env:
          CODEPIPELINE_NAME: ${{ secrets.CODEPIPELINE_NAME }}
        run: |
          pipeline_name="${CODEPIPELINE_NAME}"
          echo "Pipeline Name: ${pipeline_name}"

          # Determine AWS Region
          aws_region=$(aws configure get region || echo $AWS_DEFAULT_REGION || echo $AWS_REGION)
          if [ -z "${aws_region}" ]; then
            echo "Warning: AWS Region could not be determined. Assuming us-east-1 for the link."
            aws_region="us-east-1" # Provide a fallback region
          fi
          echo "AWS Region: ${aws_region}"

          echo "Starting CodePipeline execution for pipeline: ${pipeline_name} in region ${aws_region}..."
          execution_output=$(aws codepipeline start-pipeline-execution --name "${pipeline_name}")

          # Check if the command was successful before proceeding
          if [ $? -ne 0 ]; then
            echo "Error starting CodePipeline execution."
            echo "${execution_output}" # Print error from aws cli
            exit 1
          fi

          # Extract execution ID using jq (ensure jq is available on runner or install it)
          execution_id=$(echo "${execution_output}" | jq -r '.pipelineExecutionId')

          if [ -z "${execution_id}" ] || [ "${execution_id}" == "null" ]; then
            echo "Error: Could not extract pipelineExecutionId from the output."
            echo "Output: ${execution_output}"
            # Decide if this should be a fatal error
            # exit 1
            echo "Pipeline execution started, but could not generate direct link."
          else
            echo "Pipeline execution started with ID: ${execution_id}"
            # Construct the URL
            console_url="https://${aws_region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${pipeline_name}/executions/${execution_id}/timeline?region=${aws_region}"
            echo "View Execution Details: ${console_url}"
          fi 